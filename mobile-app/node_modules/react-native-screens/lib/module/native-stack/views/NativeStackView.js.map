{"version":3,"sources":["NativeStackView.tsx"],"names":["React","View","StyleSheet","Platform","ScreenStack","Screen","ScreenComponent","StackActions","useTheme","HeaderConfig","NativeStackView","state","navigation","descriptors","colors","styles","container","routes","map","route","options","render","renderScene","key","gestureEnabled","stackPresentation","stackAnimation","contentStyle","absoluteFill","OS","emit","type","target","dispatch","pop","source","backgroundColor","background","undefined","create","flex"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,QAA3B,QAA2C,cAA3C;AACA,SACEC,WADF,EAEEC,MAAM,IAAIC,eAFZ,QAIO,sBAJP;AAKA,SAEEC,YAFF,EAGEC,QAHF,QAIO,0BAJP;AAKA,OAAOC,YAAP,MAAyB,gBAAzB;AAMA,MAAMJ,MAAM,GAAIC,eAAhB;AAQA,eAAe,SAASI,eAAT,CAAyB;AACtCC,EAAAA,KADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA;AAHsC,CAAzB,EAIL;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAaN,QAAQ,EAA3B;AAEA,sBACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEO,MAAM,CAACC;AAA3B,KACGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AAC3B,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAM,EAAEC;AAAnB,QAAmCT,WAAW,CAACM,KAAK,CAACI,GAAP,CAApD;AACA,UAAM;AACJC,MAAAA,cADI;AAEJC,MAAAA,iBAAiB,GAAG,MAFhB;AAGJC,MAAAA,cAHI;AAIJC,MAAAA;AAJI,QAKFP,OALJ;AAOA,wBACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAED,KAAK,CAACI,GADb;AAEE,MAAA,KAAK,EAAErB,UAAU,CAAC0B,YAFpB;AAGE,MAAA,cAAc,EAAEzB,QAAQ,CAAC0B,EAAT,KAAgB,SAAhB,GAA4B,KAA5B,GAAoCL,cAHtD;AAIE,MAAA,iBAAiB,EAAEC,iBAJrB;AAKE,MAAA,cAAc,EAAEC,cALlB;AAME,MAAA,QAAQ,EAAE,MAAM;AACdd,QAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,QADQ;AAEdC,UAAAA,MAAM,EAAEb,KAAK,CAACI;AAFA,SAAhB;AAID,OAXH;AAYE,MAAA,WAAW,EAAE,MAAM;AACjBX,QAAAA,UAAU,CAACkB,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,SADQ;AAEdC,UAAAA,MAAM,EAAEb,KAAK,CAACI;AAFA,SAAhB;AAKAX,QAAAA,UAAU,CAACqB,QAAX,iCACK1B,YAAY,CAAC2B,GAAb,EADL;AAEEC,UAAAA,MAAM,EAAEhB,KAAK,CAACI,GAFhB;AAGES,UAAAA,MAAM,EAAErB,KAAK,CAACY;AAHhB;AAKD;AAvBH,oBAwBE,oBAAC,YAAD,eAAkBH,OAAlB;AAA2B,MAAA,KAAK,EAAED;AAAlC,OAxBF,eAyBE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE,CACLJ,MAAM,CAACC,SADF,EAEL;AACEoB,QAAAA,eAAe,EACbX,iBAAiB,KAAK,kBAAtB,GACIX,MAAM,CAACuB,UADX,GAEIC;AAJR,OAFK,EAQLX,YARK;AADT,OAWGL,WAAW,EAXd,CAzBF,CADF;AAyCD,GAlDA,CADH,CADF;AAuDD;AAED,MAAMP,MAAM,GAAGb,UAAU,CAACqC,MAAX,CAAkB;AAC/BvB,EAAAA,SAAS,EAAE;AACTwB,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport {\n  ScreenStack,\n  Screen as ScreenComponent,\n  ScreenProps,\n} from 'react-native-screens';\nimport {\n  StackNavigationState,\n  StackActions,\n  useTheme,\n} from '@react-navigation/native';\nimport HeaderConfig from './HeaderConfig';\nimport {\n  NativeStackNavigationHelpers,\n  NativeStackDescriptorMap,\n} from '../types';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\n\ntype Props = {\n  state: StackNavigationState;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={Platform.OS === 'android' ? false : gestureEnabled}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <View\n              style={[\n                styles.container,\n                {\n                  backgroundColor:\n                    stackPresentation !== 'transparentModal'\n                      ? colors.background\n                      : undefined,\n                },\n                contentStyle,\n              ]}>\n              {renderScene()}\n            </View>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}