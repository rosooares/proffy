{"version":3,"sources":["HeaderConfig.tsx"],"names":["React","ScreenStackHeaderBackButtonImage","ScreenStackHeaderConfig","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","useTheme","HeaderConfig","props","colors","route","title","headerRight","headerLeft","headerCenter","headerTitle","headerBackTitle","headerBackTitleVisible","backButtonImage","headerHideBackButton","headerHideShadow","headerLargeTitleHideShadow","headerTintColor","headerTopInsetEnabled","headerLargeTitle","headerTranslucent","headerStyle","headerLargeStyle","headerTitleStyle","headerLargeTitleStyle","headerBackTitleStyle","headerShown","backButtonInCustomView","undefined","name","fontFamily","fontSize","color","text","primary","backgroundColor","card","tintColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n} from 'react-native-screens';\nimport { Route, useTheme } from '@react-navigation/native';\nimport { NativeStackNavigationOptions } from '../types';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig(props: Props) {\n  const { colors } = useTheme();\n  const {\n    route,\n    title,\n    headerRight,\n    headerLeft,\n    headerCenter,\n    headerTitle,\n    headerBackTitle,\n    headerBackTitleVisible = true,\n    backButtonImage,\n    headerHideBackButton,\n    headerHideShadow,\n    headerLargeTitleHideShadow,\n    headerTintColor,\n    headerTopInsetEnabled = true,\n    headerLargeTitle,\n    headerTranslucent,\n    headerStyle = {},\n    headerLargeStyle = {},\n    headerTitleStyle = {},\n    headerLargeTitleStyle = {},\n    headerBackTitleStyle = {},\n    headerShown,\n    backButtonInCustomView,\n  } = props;\n\n  return (\n    <ScreenStackHeaderConfig\n      hidden={headerShown === false}\n      backButtonInCustomView={backButtonInCustomView}\n      translucent={headerTranslucent === true}\n      hideShadow={headerHideShadow}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      hideBackButton={headerHideBackButton}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleFontFamily={headerTitleStyle.fontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      topInsetEnabled={headerTopInsetEnabled}\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={headerBackTitleStyle.fontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      color={headerTintColor !== undefined ? headerTintColor : colors.primary}\n      largeTitle={headerLargeTitle}\n      largeTitleFontFamily={headerLargeTitleStyle.fontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleColor={headerLargeTitleStyle.color}\n      backgroundColor={\n        headerStyle.backgroundColor !== undefined\n          ? headerStyle.backgroundColor\n          : colors.card\n      }\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor: headerTintColor ?? colors.primary })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]}