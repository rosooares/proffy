{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["React","createNavigatorFactory","useNavigationBuilder","StackRouter","StackActions","screensEnabled","NativeStackView","NativeStackNavigator","props","Error","initialRouteName","children","screenOptions","rest","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,sBADF,EAEEC,oBAFF,EAIEC,WAJF,EAOEC,YAPF,QAQO,0BARP;AAUA,SACEC,cADF,CAEE;AAFF,OAGO,sBAHP;AAIA,OAAOC,eAAP,MAA4B,0BAA5B;;AAOA,SAASC,oBAAT,CAA8BC,KAA9B,EAAgE;AAC9D,MAAI,CAACH,cAAc,EAAnB,EAAuB;AACrB,UAAM,IAAII,KAAJ,CACJ,oEADI,CAAN;AAGD;;AAED,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,QAApB;AAA8BC,IAAAA;AAA9B,MAAyDJ,KAA/D;AAAA,QAAsDK,IAAtD,4BAA+DL,KAA/D;;AACA,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqCd,oBAAoB,CAK7DC,WAL6D,EAKhD;AACbO,IAAAA,gBADa;AAEbC,IAAAA,QAFa;AAGbC,IAAAA;AAHa,GALgD,CAA/D;AAWAZ,EAAAA,KAAK,CAACiB,SAAN,CACE,MACED,UAAU,CAACE,WAAX,IACAF,UAAU,CAACE,WAAX,CAAuB,UAAvB,EAAoCC,CAAD,IAAO;AACxC,UAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAX,EAAlB,CADwC,CAGxC;AACA;;AACAC,IAAAA,qBAAqB,CAAC,MAAM;AAC1B,UACEP,KAAK,CAACQ,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;AACA;AACA;AACAP,QAAAA,UAAU,CAACQ,QAAX,iCACKpB,YAAY,CAACqB,QAAb,EADL;AAEEC,UAAAA,MAAM,EAAEZ,KAAK,CAACa;AAFhB;AAID;AACF,KAboB,CAArB;AAcD,GAnBD,CAHJ,EAuBE,CAACX,UAAD,EAAaF,KAAK,CAACQ,KAAnB,EAA0BR,KAAK,CAACa,GAAhC,CAvBF;AA0BA,sBACE,oBAAC,eAAD,eACMd,IADN;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,UAAU,EAAEE,UAHd;AAIE,IAAA,WAAW,EAAED;AAJf,KADF;AAQD;;AAED,eAAed,sBAAsB,CAKnCM,oBALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport {\n  createNavigatorFactory,\n  useNavigationBuilder,\n  EventArg,\n  StackRouter,\n  StackNavigationState,\n  StackRouterOptions,\n  StackActions,\n} from '@react-navigation/native';\n\nimport {\n  screensEnabled,\n  // eslint-disable-next-line import/no-unresolved\n} from 'react-native-screens';\nimport NativeStackView from '../views/NativeStackView';\nimport {\n  NativeStackNavigatorProps,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n} from '../types';\n\nfunction NativeStackNavigator(props: NativeStackNavigatorProps) {\n  if (!screensEnabled()) {\n    throw new Error(\n      'Native stack is only available if React Native Screens is enabled.'\n    );\n  }\n\n  const { initialRouteName, children, screenOptions, ...rest } = props;\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener &&\n      navigation.addListener('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]}