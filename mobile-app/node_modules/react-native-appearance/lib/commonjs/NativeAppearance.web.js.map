{"version":3,"sources":["NativeAppearance.web.tsx"],"names":["getQuery","window","matchMedia","isMediaQueryList","query","addListener","removeListener","matches","NativeAppearance","name","initialPreferences","colorScheme","NativeAppearanceProvider","props","React","useEffect","listener","SyntheticPlatformEmitter","emit","flex"],"mappings":"2YAAA,oDACA,yCAIA,gG,+FAEA,QAASA,CAAAA,QAAT,EAA2C,CACzC,GAAI,MAAOC,CAAAA,MAAP,GAAkB,WAAlB,EAAiC,CAACA,MAAM,CAACC,UAA7C,CAAyD,MAAO,KAAP,CACzD,MAAOD,CAAAA,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAP,CACD,CAED,QAASC,CAAAA,gBAAT,CAA0BC,KAA1B,CAA+D,CAC7D,MAAOA,CAAAA,KAAK,EAAIA,KAAK,CAACC,WAAf,EAA8BD,KAAK,CAACE,cAApC,EAAsD,MAAOF,CAAAA,KAAK,CAACG,OAAb,GAAyB,SAAtF,CACD,CAEM,GAAMC,CAAAA,gBAAgB,CAAG,CAC9B,GAAIC,CAAAA,IAAJ,EAAmB,CACjB,MAAO,kBAAP,CACD,CAH6B,CAI9B,GAAIC,CAAAA,kBAAJ,EAAgD,CAC9C,GAAMN,CAAAA,KAAK,CAAGJ,QAAQ,EAAtB,CACA,GAAIG,gBAAgB,CAACC,KAAD,CAApB,CAA6B,CAC3B,MAAO,CAAEO,WAAW,CAAEP,KAAK,CAACG,OAAN,CAAgB,MAAhB,CAAyB,OAAxC,CAAP,CACD,CACD,MAAO,CAAEI,WAAW,CAAE,eAAf,CAAP,CACD,CAV6B,CAAzB,C,0CAaA,QAASC,CAAAA,wBAAT,CAAkCC,KAAlC,CAA8C,CACnDC,KAAK,CAACC,SAAN,CAAgB,UAAM,CACpB,GAAMX,CAAAA,KAAK,CAAGJ,QAAQ,EAAtB,CAEA,QAASgB,CAAAA,QAAT,MAAoD,IAAhCT,CAAAA,OAAgC,MAAhCA,OAAgC,CAClD,GAAMI,CAAAA,WAAW,CAAGJ,OAAO,CAAG,MAAH,CAAY,OAAvC,CACAU,kCAAyBC,IAAzB,CAA8B,mBAA9B,CAAmD,CACjDP,WAAW,CAAXA,WADiD,CAAnD,EAGD,CAED,GAAIP,KAAJ,CACEA,KAAK,CAACC,WAAN,CAAkBW,QAAlB,EAEF,MAAO,WAAM,CACX,GAAIZ,KAAJ,CAAW,CACTA,KAAK,CAACE,cAAN,CAAqBU,QAArB,EACD,CACF,CAJD,CAKD,CAlBD,CAkBG,EAlBH,EAoBA,MAAO,qBAAC,iBAAD,wBAAM,KAAK,CAAE,CAAEG,IAAI,CAAE,CAAR,CAAb,EAA8BN,KAA9B,mDAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { AppearancePreferences } from './Appearance.types';\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nfunction getQuery(): MediaQueryList | null {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    const query = getQuery();\n    if (isMediaQueryList(query)) {\n      return { colorScheme: query.matches ? 'dark' : 'light' }\n    }\n    return { colorScheme: 'no-preference' };\n  },\n};\n\nexport function NativeAppearanceProvider(props: any) {\n  React.useEffect(() => {\n    const query = getQuery();\n\n    function listener({ matches }: MediaQueryListEvent) {\n      const colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme,\n      });\n    }\n\n    if (query)\n      query.addListener(listener);\n\n    return () => {\n      if (query) {\n        query.removeListener(listener)\n      }\n    }\n  }, []);\n\n  return <View style={{ flex: 1 }} {...props} />\n};\n"]}